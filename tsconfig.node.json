{
  "compilerOptions": {
    // 指定 tsbuildinfo 文件的存储位置，用于增量编译，加速后续构建。
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    // 设置编译后的 JavaScript 代码的目标版本。ES2023 是一个较新的 ECMAScript 标准。
    "target": "ES2023",
    // 指定编译过程中需要引入的库文件。这里指定了 ES2023 的所有特性。
    "lib": ["ES2023"],
    // 指定生成代码的模块系统。ESNext 表示使用最新的 ECMAScript 模块标准。
    "module": "ESNext",
    // 跳过对所有声明文件（*.d.ts）的类型检查。这可以加快编译速度，但会牺牲一些类型安全性。
    "skipLibCheck": true,

    /* Bundler mode - 以下是为现代打包工具（如 Vite, esbuild）优化的选项 */
    // 指定模块解析策略。'bundler' 模式会委托给打包工具处理模块路径。
    "moduleResolution": "bundler",
    // 允许导入扩展名为 .ts 的文件。例如 `import './foo.ts'`。
    "allowImportingTsExtensions": true,
    // 强制 import 和 export 语句的写法与实际模块类型一致。避免 `import type` 被错误地用于值导入。
    "verbatimModuleSyntax": true,
    // 强制 TypeScript 将每个文件都视为一个模块，即使它没有顶层的 import/export。
    "moduleDetection": "force",
    // 不生成任何输出文件（.js 文件）。通常在只进行类型检查或由打包工具处理转换时使用。
    "noEmit": true,

    /* Linting - 以下是代码质量和风格检查相关的选项 */
    // 启用所有严格的类型检查选项，提供更强的代码健壮性。
    "strict": true,
    // 报告未使用的局部变量。
    "noUnusedLocals": true,
    // 报告未使用的函数参数。
    "noUnusedParameters": true,
    // 仅允许在类型擦除后仍然有效的语法。
    "erasableSyntaxOnly": true,
    // 禁止 switch 语句中出现意外的 case "fallthrough"（即 case 块缺少 break 或 return）。
    "noFallthroughCasesInSwitch": true,
    // 检查并报告那些仅为了副作用而导入但未被使用的模块。
    "noUncheckedSideEffectImports": true
  },
  // 指定需要被 TypeScript 编译器包含的文件。这里只包含了 Vite 的配置文件。
  "include": ["vite.config.ts"]
}
